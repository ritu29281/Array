class Solution {
public:
    void merge(vector<int>& nums,vector<int>& temp,int start,int mid, int end){
        int i=start,j=mid+1,k=start;
        while(i<=mid && j<=end){
            if(nums[i]<=nums[j]){
                temp[k++]=nums[i++];
            }
            else{
                temp[k++]=nums[j++];
            }
        }
        while(i<=mid){
            temp[k++]=nums[i++];
        }
        while(j<=end){
            temp[k++]=nums[j++];
        }
      while(start<=end){
          nums[start]=temp[start];
          start++;
      }
    }
    void mergesort(int start,int end,vector<int>& nums,vector<int>& temp){
        if(start>=end){
            return ;
        }
        int mid=(start+end)/2;
        mergesort(start,mid,nums,temp);
        mergesort(mid+1,end,nums,temp);
        merge(nums,temp,start,mid,end);
    }
    vector<int> sortArray(vector<int>& nums) {
        vector<int>temp(nums.size(),0);
       mergesort(0,nums.size()-1,nums,temp); 
        return nums;
    }
};
